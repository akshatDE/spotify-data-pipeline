-- =====================================================
-- Core Snowflake DDL for Spotify Data Pipeline
-- Simplified version with just the essential table definitions
-- =====================================================

-- Create database and schema
CREATE DATABASE IF NOT EXISTS SPOTIFY_DATA;
USE DATABASE SPOTIFY_DATA;
CREATE SCHEMA IF NOT EXISTS RAW_DATA;
USE SCHEMA RAW_DATA;

-- 1. ALBUMS TABLE
CREATE OR REPLACE TABLE ALBUMS (
    ALBUM_ID VARCHAR(255) NOT NULL PRIMARY KEY,
    ALBUM_NAME VARCHAR(500) NOT NULL,
    RELEASE_DATE DATE,
    TOTAL_TRACKS INTEGER,
    SPOTIFY_URL VARCHAR(500),
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

-- 2. ARTISTS TABLE  
CREATE OR REPLACE TABLE ARTISTS (
    ARTIST_ID VARCHAR(255) NOT NULL PRIMARY KEY,
    ARTIST_NAME VARCHAR(500) NOT NULL,
    SPOTIFY_URL VARCHAR(500),
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

-- 3. SONGS TABLE
CREATE OR REPLACE TABLE SONGS (
    SONG_ID VARCHAR(255) NOT NULL PRIMARY KEY,
    SONG_NAME VARCHAR(500) NOT NULL,
    ADDED_AT TIMESTAMP_NTZ,
    DURATION_MS INTEGER,
    POPULARITY INTEGER,
    SPOTIFY_URL VARCHAR(500),
    ALBUM_ID VARCHAR(255) NOT NULL,
    ARTIST_ID VARCHAR(255) NOT NULL,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    
    -- Foreign key constraints
    CONSTRAINT FK_SONGS_ALBUM FOREIGN KEY (ALBUM_ID) REFERENCES ALBUMS(ALBUM_ID),
    CONSTRAINT FK_SONGS_ARTIST FOREIGN KEY (ARTIST_ID) REFERENCES ARTISTS(ARTIST_ID)
);

-- 4. CREATE INDEXES
CREATE INDEX IF NOT EXISTS IDX_SONGS_ALBUM_ID ON SONGS(ALBUM_ID);
CREATE INDEX IF NOT EXISTS IDX_SONGS_ARTIST_ID ON SONGS(ARTIST_ID);
CREATE INDEX IF NOT EXISTS IDX_SONGS_POPULARITY ON SONGS(POPULARITY DESC);
CREATE INDEX IF NOT EXISTS IDX_ALBUMS_RELEASE_DATE ON ALBUMS(RELEASE_DATE);
